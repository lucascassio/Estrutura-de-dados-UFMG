1-
O limite do loop no for estava mal de definido, o que acabava causando lixo na resposta, já que o ultimo termo nunca era atribuido.

2-
==5971== Memcheck, a memory error detector
==5971== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5971== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==5971== Command: ./teste
==5971== 
==5971== Conditional jump or move depends on uninitialised value(s)
==5971==    at 0x48E0B56: __vfprintf_internal (vfprintf-internal.c:1516)
==5971==    by 0x48CA81E: printf (printf.c:33)
==5971==    by 0x1091F1: main (c2.c:11)
==5971== 
==5971== Use of uninitialised value of size 8
==5971==    at 0x48C433B: _itoa_word (_itoa.c:177)
==5971==    by 0x48DFB3D: __vfprintf_internal (vfprintf-internal.c:1516)
==5971==    by 0x48CA81E: printf (printf.c:33)
==5971==    by 0x1091F1: main (c2.c:11)
==5971== 
==5971== Conditional jump or move depends on uninitialised value(s)
==5971==    at 0x48C434C: _itoa_word (_itoa.c:177)
==5971==    by 0x48DFB3D: __vfprintf_internal (vfprintf-internal.c:1516)
==5971==    by 0x48CA81E: printf (printf.c:33)
==5971==    by 0x1091F1: main (c2.c:11)
==5971== 
==5971== Conditional jump or move depends on uninitialised value(s)
==5971==    at 0x48E0643: __vfprintf_internal (vfprintf-internal.c:1516)
==5971==    by 0x48CA81E: printf (printf.c:33)
==5971==    by 0x1091F1: main (c2.c:11)
==5971== 
==5971== Conditional jump or move depends on uninitialised value(s)
==5971==    at 0x48DFC85: __vfprintf_internal (vfprintf-internal.c:1516)
==5971==    by 0x48CA81E: printf (printf.c:33)
==5971==    by 0x1091F1: main (c2.c:11)
==5971== 
0 1 2 3 4 5 6 7 8 0 
==5971== 
==5971== HEAP SUMMARY:
==5971==     in use at exit: 0 bytes in 0 blocks
==5971==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==5971== 
==5971== All heap blocks were freed -- no leaks are possible
==5971== 
==5971== Use --track-origins=yes to see where uninitialised values come from
==5971== For lists of detected and suppressed errors, rerun with: -s
==5971== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)

3-
O código foi corrigido simplesmente alterando o limite do loop.

4-
==6052== Memcheck, a memory error detector
==6052== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6052== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==6052== Command: ./teste
==6052== 
0 1 2 3 4 5 6 7 8 9 
==6052== 
==6052== HEAP SUMMARY:
==6052==     in use at exit: 0 bytes in 0 blocks
==6052==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==6052== 
==6052== All heap blocks were freed -- no leaks are possible
==6052== 
==6052== For lists of detected and suppressed errors, rerun with: -s
==6052== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)