1- 
O c칩digo compila, mas d치 segmentation fault.

2-
==7181== Memcheck, a memory error detector
==7181== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7181== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==7181== Command: ./teste
==7181== 
==7181== Use of uninitialised value of size 8
==7181==    at 0x10917A: main (c4.c:13)
==7181== 
==7181== Invalid write of size 4
==7181==    at 0x10917A: main (c4.c:13)
==7181==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==7181== 
==7181== 
==7181== Process terminating with default action of signal 11 (SIGSEGV)
==7181==  Access not within mapped region at address 0x0
==7181==    at 0x10917A: main (c4.c:13)
==7181==  If you believe this happened as a result of a stack
==7181==  overflow in your program's main thread (unlikely but
==7181==  possible), you can try to increase the size of the
==7181==  main thread stack using the --main-stacksize= flag.
==7181==  The main thread stack size used in this run was 8388608.
==7181== 
==7181== HEAP SUMMARY:
==7181==     in use at exit: 0 bytes in 0 blocks
==7181==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==7181== 
==7181== All heap blocks were freed -- no leaks are possible
==7181== 
==7181== Use --track-origins=yes to see where uninitialised values come from
==7181== For lists of detected and suppressed errors, rerun with: -s
==7181== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)

3-
O c칩digo foi corrigido liberando corretamente a mem칩ria alocada

4-
==7309== Memcheck, a memory error detector
==7309== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7309== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==7309== Command: ./teste
==7309== 
==7309== 
==7309== HEAP SUMMARY:
==7309==     in use at exit: 32 bytes in 1 blocks
==7309==   total heap usage: 6 allocs, 5 frees, 112 bytes allocated
==7309== 
==7309== LEAK SUMMARY:
==7309==    definitely lost: 32 bytes in 1 blocks
==7309==    indirectly lost: 0 bytes in 0 blocks
==7309==      possibly lost: 0 bytes in 0 blocks
==7309==    still reachable: 0 bytes in 0 blocks
==7309==         suppressed: 0 bytes in 0 blocks
==7309== Rerun with --leak-check=full to see details of leaked memory
==7309== 
==7309== For lists of detected and suppressed errors, rerun with: -s
==7309== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)